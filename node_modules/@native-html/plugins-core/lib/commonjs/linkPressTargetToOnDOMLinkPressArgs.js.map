{"version":3,"sources":["linkPressTargetToOnDOMLinkPressArgs.ts"],"names":["linkPressTargetToOnDOMLinkPressArgs","uri","classAttribute","downloadAttribute","hrefAttribute","hreflangAttribute","targetAttribute","idAttribute","nameAttribute","referrerpolicyAttribute","relAttribute","typeAttribute","attributes","class","download","href","hreflang","id","name","referrerpolicy","rel","type","target","nativeEvent"],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,mCAAT,CAA6C;AAC1DC,EAAAA,GAD0D;AAE1DC,EAAAA,cAF0D;AAG1DC,EAAAA,iBAH0D;AAI1DC,EAAAA,aAJ0D;AAK1DC,EAAAA,iBAL0D;AAM1DC,EAAAA,eAN0D;AAO1DC,EAAAA,WAP0D;AAQ1DC,EAAAA,aAR0D;AAS1DC,EAAAA,uBAT0D;AAU1DC,EAAAA,YAV0D;AAW1DC,EAAAA;AAX0D,CAA7C,EAY2D;AACxE,QAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAEX,cADU;AAEjBY,IAAAA,QAAQ,EAAEX,iBAFO;AAGjBY,IAAAA,IAAI,EAAEX,aAHW;AAIjBY,IAAAA,QAAQ,EAAEX,iBAJO;AAKjBY,IAAAA,EAAE,EAAEV,WALa;AAMjBW,IAAAA,IAAI,EAAEV,aANW;AAOjBW,IAAAA,cAAc,EAAEV,uBAPC;AAQjBW,IAAAA,GAAG,EAAEV,YARY;AASjBW,IAAAA,IAAI,EAAEV,aATW;AAUjBW,IAAAA,MAAM,EAAEhB;AAVS,GAAnB;;AAYA,OAAK,MAAMY,IAAX,IAAmBN,UAAnB,EAA+B;AAC7B,QAAIA,UAAU,CAACM,IAAD,CAAV,IAAoB,IAAxB,EAA8B;AAC5B,aAAON,UAAU,CAACM,IAAD,CAAjB;AACD;AACF;;AACD,SAAO,CACL;AAAEK,IAAAA,WAAW,EAAE;AAAf,GADK,EAELtB,GAFK,EAGLW,UAHK,EAIJN,eAAD,IAA4B,OAJvB,CAAP;AAMD","sourcesContent":["import { RenderersProps } from 'react-native-render-html';\nimport { LinkPressTarget } from '@formidable-webview/webshell';\n\n/**\n * This function converts an \"click event\" from webshell to an array of\n * arguments for `onLinkPress` callback from react-native-render-html.\n *\n * @param param0 - The event from webshell\n * @public\n */\nexport default function linkPressTargetToOnDOMLinkPressArgs({\n  uri,\n  classAttribute,\n  downloadAttribute,\n  hrefAttribute,\n  hreflangAttribute,\n  targetAttribute,\n  idAttribute,\n  nameAttribute,\n  referrerpolicyAttribute,\n  relAttribute,\n  typeAttribute\n}: LinkPressTarget): Parameters<Required<RenderersProps['a']>['onPress']> {\n  const attributes = {\n    class: classAttribute,\n    download: downloadAttribute,\n    href: hrefAttribute,\n    hreflang: hreflangAttribute,\n    id: idAttribute,\n    name: nameAttribute,\n    referrerpolicy: referrerpolicyAttribute,\n    rel: relAttribute,\n    type: typeAttribute,\n    target: targetAttribute\n  };\n  for (const name in attributes) {\n    if (attributes[name] == null) {\n      delete attributes[name];\n    }\n  }\n  return [\n    { nativeEvent: {} } as any,\n    uri,\n    attributes as any,\n    (targetAttribute as any) || '_self'\n  ];\n}\n"]}