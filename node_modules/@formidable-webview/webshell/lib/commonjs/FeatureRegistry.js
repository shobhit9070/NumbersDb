"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function extractFeatureProps(props, propsMap) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return Object.keys(props).reduce(function (obj, key) {
    if (propsMap[key] && (type == null || propsMap[key].type === type)) {
      return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, key, props[key]));
    }

    return obj;
  }, {});
}

function _filterWebViewProps(props, propsMap) {
  return Object.keys(props).reduce(function (obj, key) {
    if (propsMap[key] || key.startsWith('webshell')) {
      return obj;
    }

    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, key, props[key]));
  }, {});
}

function getHandlerUUID(identifier, eventId) {
  return "".concat(identifier, ":").concat(eventId);
}

function extractHandlersMap(features) {
  return features.map(function (f) {
    return Object.values(f.propSpecs);
  }).reduce(function (p, c) {
    return [].concat(_toConsumableArray(p), _toConsumableArray(c));
  }, []).reduce(function (map, spec) {
    return _objectSpread(_objectSpread({}, map), {}, _defineProperty({}, getHandlerUUID(spec.featureIdentifier, spec.eventId), spec));
  }, {});
}

function extractPropsSpecsMap(features, reporter) {
  return features.map(function (f) {
    return Object.values(f.propSpecs);
  }).reduce(function (p, c) {
    return [].concat(_toConsumableArray(p), _toConsumableArray(c));
  }, []).reduce(function (map, spec) {
    if (map[spec.name]) {
      reporter.dispatchError('WEBSH_DUPLICATED_REGISTERED_PROP', map[spec.name], spec);
    }

    return _objectSpread(_objectSpread({}, map), {}, _defineProperty({}, spec.name, spec));
  }, {});
}

var FeatureRegistry = /*#__PURE__*/function () {
  function FeatureRegistry(features, reporter) {
    _classCallCheck(this, FeatureRegistry);

    _defineProperty(this, "propsMap", void 0);

    _defineProperty(this, "handlersMap", void 0);

    _defineProperty(this, "features", void 0);

    this.propsMap = extractPropsSpecsMap(features, reporter);
    this.handlersMap = extractHandlersMap(features);
    this.features = features;
  }

  _createClass(FeatureRegistry, [{
    key: "getWebHandlers",
    value: function getWebHandlers(props) {
      return extractFeatureProps(props, this.propsMap, 'handler');
    }
  }, {
    key: "getPropDefFromId",
    value: function getPropDefFromId(identifier, shellHandlerId) {
      return this.handlersMap[getHandlerUUID(identifier, shellHandlerId)];
    }
  }, {
    key: "getPropDefFromHandlerName",
    value: function getPropDefFromHandlerName(handlerName) {
      return this.propsMap[handlerName];
    }
  }, {
    key: "filterWebViewProps",
    value: function filterWebViewProps(webShellProps) {
      return _filterWebViewProps(webShellProps, this.propsMap);
    }
  }, {
    key: "hasFeature",
    value: function hasFeature(feature) {
      return this.features.indexOf(feature) !== -1;
    }
  }]);

  return FeatureRegistry;
}();

exports["default"] = FeatureRegistry;
//# sourceMappingURL=FeatureRegistry.js.map