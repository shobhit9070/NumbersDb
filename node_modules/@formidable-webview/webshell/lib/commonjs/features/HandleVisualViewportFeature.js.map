{"version":3,"sources":["HandleVisualViewportFeature.ts"],"names":["HandleVisualViewportFeature","FeatureBuilder","script","defaultOptions","identifier","withShellHandler","build"],"mappings":";;;;;;;AACA;;;;;;;AA8BA;;;;;;;;;;;;;;AAcO,IAAMA,2BAQZ,GAAG,IAAIC,0BAAJ,CAAmB;AACrBC,EAAAA,MAAM,EAANA,MADqB;AAErBC,EAAAA,cAAc,EAAE,EAFK;AAGrBC,EAAAA,UAAU,EAAE;AAHS,CAAnB,EAKDC,gBALC,CAMA,qBANA,EAQDC,KARC,EARG","sourcesContent":["import script from './HandleVisualViewportFeature.webjs';\nimport FeatureBuilder from '../FeatureBuilder';\nimport { FeatureClass } from '../Feature';\nimport type { PropDefinition, DOMRectSize } from '../types';\n\n/**\n * An object describing the visual viewport of the `WebView`.\n *\n * @public\n */\nexport interface VisualViewportDimensions {\n  /**\n   * The visual viewport scale. Because this API is quite recent, we have a\n   * fallback strategy to compute scale.\n   *\n   * @remarks\n   * The other values in this object are already in React Native dpi units.\n   */\n  scale: number;\n  /**\n   * window.visualViewport.width and window.visualViewport.height\n   */\n  visualViewport: DOMRectSize;\n  /**\n   * `false` when these values are coming from the VisualViewport API and\n   * `true` when they are \"best guess\". In legacy mode, be warned that you will\n   * not receive frequent updates when the user pinch-zoom.\n   */\n  isLegacy: boolean;\n}\n\n/**\n * This feature provides `onDOMVisualViewport` prop with payloads of type {@link VisualViewportDimensions}.\n * It will trigger events when the visual viewport changes.\n * Requires `VisualViewport` API support on browsers (iOS Safari 13 and Android WebView 62).\n * When the API is not available, payload object will have `isLegacy` field set to true.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport | VisualViewport API}.\n *\n * @example\n * ```ts\n * const Webshell = makeWebshell(WebView, new HandleVisualViewportFeature());\n * ```\n * @public\n *\n */\nexport const HandleVisualViewportFeature: FeatureClass<\n  {},\n  {\n    onDOMVisualViewport: PropDefinition<\n      'onDOMVisualViewport',\n      (d: VisualViewportDimensions) => void\n    >;\n  }\n> = new FeatureBuilder({\n  script,\n  defaultOptions: {},\n  identifier: 'org.formidable-webview/webshell.handle-visual-viewport'\n})\n  .withShellHandler<'onDOMVisualViewport', VisualViewportDimensions>(\n    'onDOMVisualViewport'\n  )\n  .build();\n"]}