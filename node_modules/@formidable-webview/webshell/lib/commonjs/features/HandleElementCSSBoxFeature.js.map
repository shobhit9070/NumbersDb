{"version":3,"sources":["HandleElementCSSBoxFeature.ts"],"names":["defaultOptions","shouldThrowWhenNotFound","HandleElementCSSBoxFeature","FeatureBuilder","script","identifier","withShellHandler","build"],"mappings":";;;;;;;AACA;;;;;;AAqGA,IAAMA,cAA8D,GAAG;AACrEC,EAAAA,uBAAuB,EAAE;AAD4C,CAAvE;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BO,IAAMC,0BAQZ,GAAG,IAAIC,0BAAJ,CAAmB;AACrBC,EAAAA,MAAM,EAANA,MADqB;AAErBJ,EAAAA,cAAc,EAAdA,cAFqB;AAGrBK,EAAAA,UAAU,EAAE;AAHS,CAAnB,EAKDC,gBALC,CAMA,8BANA,EAQDC,KARC,EARG","sourcesContent":["import script from './HandleElementCSSBoxFeature.webjs';\nimport FeatureBuilder from '../FeatureBuilder';\nimport type { DOMElementRequest, DOMRectSize, PropDefinition } from '../types';\nimport type { FeatureClass } from '../Feature';\n\n/**\n * An object describing customization for the dimensions feature.\n *\n * @public\n */\nexport interface HandleElementCSSBoxDimensionsOptions {\n  /**\n   * The element to target. This argument is required.\n   */\n  target: DOMElementRequest;\n  /**\n   * When no elements are found matching the target, should the script\n   * raise an error?\n   *\n   * @defaultValue false\n   */\n  shouldThrowWhenNotFound?: boolean;\n}\n\n/**\n * Computed styles which affect the CSS Box dimensions.\n * See {@link https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle | window.getComputedStyle()}.\n *\n * @public\n */\nexport interface CSSBoxDimensionsComputedStyle {\n  paddingTop: number;\n  paddingBottom: number;\n  paddingLeft: number;\n  paddingRight: number;\n  borderTopWidth: number;\n  borderBottomWidth: number;\n  borderLeftWidth: number;\n  borderRightWidth: number;\n  marginTop: number;\n  marginBottom: number;\n  marginLeft: number;\n  marginRight: number;\n}\n\n/**\n * An object describing an element CSS Box dimensions, see\n * {@link https://drafts.csswg.org/css2/#box-model | CSS 2 (Box model)}.\n *\n * @remarks\n *\n * This object scalar units are CSS pixels.\n *\n * @public\n */\nexport interface ElementCSSBoxDimensions {\n  /**\n   * A box formed by `scrollWidth` and `scrollHeight` element properties.\n   *\n   * @remarks\n   * The box is formed with all the space occupied by element's children, even\n   * when overflowing. The element padding, border and scrollbar are not\n   * counted. See\n   * {@link https://drafts.csswg.org/cssom-view/#dom-element-scrollwidth},\n   * `scrollWidth` and `scrollHeight` for a reference.\n   */\n  scrollBox: DOMRectSize;\n  /**\n   * The border box as specified in the\n   * {@link https://drafts.csswg.org/css-box-3/#valdef-box-border-box | CSS Box Model}.\n   *\n   * @remarks\n   * Margin, padding and content boxes can be derived from\n   * {@link ElementCSSBoxDimensions.computedStyle}.\n   */\n  borderBox: DOMRectSize;\n  /**\n   * The computed box style. See\n   * {@link https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle | window.getComputedStyle()}.\n   *\n   * @remarks\n   * Be aware that the computed vertical margins might collapse in the\n   * viewport. See\n   * {@link https://drafts.csswg.org/css2/#collapsing-margins | CSS 2 (collapsing margins)}\n   */\n  computedStyle: CSSBoxDimensionsComputedStyle;\n  /**\n   * The width of the horizontal scrollbar.\n   *\n   * @remarks\n   * In the CSS Box model, scrollbars are part of the content box.\n   */\n  horizontalScrollbarWidth: number;\n  /**\n   * The width of the vertical scrollbar.\n   *\n   * @remarks\n   * In the CSS Box model, scrollbars are part of the content box.\n   */\n  verticalScrollbarWidth: number;\n}\n\nconst defaultOptions: Required<HandleElementCSSBoxDimensionsOptions> = {\n  shouldThrowWhenNotFound: false\n} as Required<HandleElementCSSBoxDimensionsOptions>;\n\n/**\n * This feature provides `onDOMElementCSSBoxDimensions` prop with payloads of type {@link ElementCSSBoxDimensions}.\n * The payload contains information about the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model | CSS Box dimensions} of an element in the\n * `WebView` pixels unit (see {@link HandleElementCSSBoxDimensionsOptions} to instruct which element should be targeted).\n *\n * @example\n * ```ts\n * const Webshell = makeWebshell(\n *   WebView,\n *   new HandleElementCSSBoxDimensionsOptions({\n *     target: { id: \"sidebar\" }\n *   })\n * );\n *\n * export function MyComponent(props) {\n *   const onSidebarDimensions = ({ borderBox }) => console.info(borderBox.width)\n *   return <Webshell {...props} onDOMElementCSSBoxDimensions={onSidebarDimensions} />\n * }\n * ```\n *\n * @remarks\n * A new event will be triggered on every resize.\n * If you are looking for the document content size, use {@link HandleHTMLDimensionsFeature} instead.\n *\n * @public\n */\nexport const HandleElementCSSBoxFeature: FeatureClass<\n  HandleElementCSSBoxDimensionsOptions,\n  {\n    onDOMElementCSSBoxDimensions: PropDefinition<\n      'onDOMElementCSSBoxDimensions',\n      (e: ElementCSSBoxDimensions) => void\n    >;\n  }\n> = new FeatureBuilder({\n  script,\n  defaultOptions,\n  identifier: 'org.formidable-webview/webshell.handle-element-cssbox-dimensions'\n})\n  .withShellHandler<'onDOMElementCSSBoxDimensions', ElementCSSBoxDimensions>(\n    'onDOMElementCSSBoxDimensions'\n  )\n  .build();\n"]}