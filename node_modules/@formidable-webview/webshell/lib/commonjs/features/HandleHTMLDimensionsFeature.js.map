{"version":3,"sources":["HandleHTMLDimensionsFeature.ts"],"names":["defaultOptions","deltaMin","forceImplementation","pollingInterval","listenToWindowResizeEvent","HandleHTMLDimensionsFeature","FeatureBuilder","script","identifier","withShellHandler","build"],"mappings":";;;;;;;AACA;;;;;;AA6FA,IAAMA,cAAqD,GAAG;AAC5DC,EAAAA,QAAQ,EAAE,CADkD;AAE5DC,EAAAA,mBAAmB,EAAE,KAFuC;AAG5DC,EAAAA,eAAe,EAAE,GAH2C;AAI5DC,EAAAA,yBAAyB,EAAE;AAJiC,CAA9D;AAOA;;;;;;;;;;;;;;;AAcO,IAAMC,2BAQZ,GAAG,IAAIC,0BAAJ,CAAmB;AACrBC,EAAAA,MAAM,EAANA,MADqB;AAErBP,EAAAA,cAAc,EAAdA,cAFqB;AAGrBQ,EAAAA,UAAU,EAAE;AAHS,CAAnB,EAKDC,gBALC,CAMA,qBANA,EAQDC,KARC,EARG","sourcesContent":["import script from './HandleHTMLDimensionsFeature.webjs';\nimport FeatureBuilder from '../FeatureBuilder';\nimport type { FeatureClass } from '../Feature';\nimport type { PropDefinition, DOMRectSize } from '../types';\n\n/**\n * The script will check for different APIs in order to\n * implement the notification of HTML dimensions changes. By order of preference:\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver | ResizeObserver} (resize),\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver | MutationObserver}\n * (mutation) and polling.\n *\n * @public\n */\nexport type HTMLDimensionsImplementation = 'resize' | 'mutation' | 'polling';\n\n/**\n * Options for {@link HandleHTMLDimensionsFeature}.\n *\n * @public\n */\nexport interface HandleHTMLDimensionsOptions {\n  /**\n   * Force a specific implementation, if the underlying API is available.\n   *\n   * **warning**: forcing to `'polling'` might increase battery consumption.\n   *\n   * @remarks\n   *\n   * This option is useful in development to force one implementation to mock older browsers.\n   *\n   * @defaultValue false\n   */\n  forceImplementation?: HTMLDimensionsImplementation | false;\n\n  /**\n   * In polling mode, at which interval should the dimensions be retrieved?\n   *\n   * @remarks\n   * A value of 0 will disable polling.\n   *\n   * @defaultValue 200\n   */\n  pollingInterval?: number;\n\n  /**\n   * The minimum difference between two updates' dimensions to trigger a change\n   * event.\n   *\n   *\n   * @defaultValue 0\n   */\n  deltaMin?: number;\n\n  /**\n   * Allow or disallow using `window.addEventListener('resize', handler)` to\n   * complement dimensions extraction.\n   *\n   * @remarks\n   * This option only affects 'polling' and 'resize' implementations.\n   *\n   *\n   * @defaultValue `true`\n   */\n  listenToWindowResizeEvent?: boolean;\n}\n\n/**\n * An object describing various dimensions of the HTML layout.\n *\n * @remarks\n * This object units are in CSS pixels. CSS pixels match device pixels when the\n * Web page has a `<meta name=\"viewport\" content=\"width=device-width\" />` tag.\n *\n * @public\n */\nexport interface HTMLDimensions {\n  /**\n   * The layout viewport size, e.g. the size of the WebView in device pixels.\n   */\n  layoutViewport: DOMRectSize;\n\n  /**\n   * The content size, e.g. the size of the body element in CSS pixels.\n   */\n  content: DOMRectSize;\n\n  /**\n   * Which implementation has been used to generate this event?\n   * See {@link HTMLDimensionsImplementation}.\n   */\n  implementation: HTMLDimensionsImplementation;\n}\n\nconst defaultOptions: Required<HandleHTMLDimensionsOptions> = {\n  deltaMin: 0,\n  forceImplementation: false,\n  pollingInterval: 200,\n  listenToWindowResizeEvent: true\n};\n\n/**\n * This feature provides `onDOMHTMLDimensions` prop with {@link HTMLDimensions} payloads.\n * It enables receiving various dimensions relative to the layout when a change\n * is observed to either the layout or the content size. The feature can be customized with\n * {@link HandleHTMLDimensionsOptions}.\n * See {@link https://formidable-webview.github.io/webshell//docs/getting-started#minimal-example | this guide for an example}.\n *\n * @remarks\n * If you need to guarantee that 1 CSS pixel = 1 Device pixel, you should use this\n * feature with a meta tag viewport setting width to device width.\n * See {@link ForceResponsiveViewportFeature}\n *\n * @public\n */\nexport const HandleHTMLDimensionsFeature: FeatureClass<\n  HandleHTMLDimensionsOptions,\n  {\n    onDOMHTMLDimensions: PropDefinition<\n      'onDOMHTMLDimensions',\n      (d: HTMLDimensions) => void\n    >;\n  }\n> = new FeatureBuilder({\n  script,\n  defaultOptions,\n  identifier: 'org.formidable-webview/webshell.handle-html-dimensions'\n})\n  .withShellHandler<'onDOMHTMLDimensions', HTMLDimensions>(\n    'onDOMHTMLDimensions'\n  )\n  .build();\n"]}