"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HandleVisualViewportFeature = void 0;

var _FeatureBuilder = _interopRequireDefault(require("../FeatureBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* babel-plugin-inline-import './HandleVisualViewportFeature.webjs' */
var script = "function HandleVisualViewportFeature(context) {\n  var isLegacy = !window.visualViewport;\n  var postSize = context.makeCallbackSafe(function () {\n    var scale = !isLegacy\n      ? window.visualViewport.scale\n      : screen.availWidth && window.innerWidth\n      ? screen.availWidth / window.innerWidth\n      : screen.width / window.innerWidth;\n    var viewportRect = document.documentElement.getBoundingClientRect();\n    var layoutViewport = {\n      width: viewportRect.width,\n      height: viewportRect.height\n    };\n    var visualViewport = {\n      width: isLegacy\n        ? layoutViewport.width / scale\n        : window.visualViewport.width,\n      height: isLegacy\n        ? layoutViewport.height / scale\n        : window.visualViewport.height\n    };\n    var dimensions = {\n      scale: scale,\n      visualViewport: visualViewport,\n      isLegacy: isLegacy\n    };\n    context.postMessageToShell(dimensions);\n  });\n  postSize();\n  if (isLegacy) {\n    context.warn('VisualViewport API is unavailable.');\n    window.onresize = postSize;\n  } else {\n    window.visualViewport.onresize = postSize;\n  }\n}\n";

/**
 * This feature provides `onDOMVisualViewport` prop with payloads of type {@link VisualViewportDimensions}.
 * It will trigger events when the visual viewport changes.
 * Requires `VisualViewport` API support on browsers (iOS Safari 13 and Android WebView 62).
 * When the API is not available, payload object will have `isLegacy` field set to true.
 * See {@link https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport | VisualViewport API}.
 *
 * @example
 * ```ts
 * const Webshell = makeWebshell(WebView, new HandleVisualViewportFeature());
 * ```
 * @public
 *
 */
var HandleVisualViewportFeature = new _FeatureBuilder["default"]({
  script: script,
  defaultOptions: {},
  identifier: 'org.formidable-webview/webshell.handle-visual-viewport'
}).withShellHandler('onDOMVisualViewport').build();
exports.HandleVisualViewportFeature = HandleVisualViewportFeature;
//# sourceMappingURL=HandleVisualViewportFeature.js.map