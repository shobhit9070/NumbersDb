"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BufferedWebRMIHandle = void 0;

var _WebRMIHandle = require("./WebRMIHandle");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BufferedWebRMIHandle = /*#__PURE__*/function () {
  function BufferedWebRMIHandle(webViewRef, registry, webshellDebug) {
    _classCallCheck(this, BufferedWebRMIHandle);

    _defineProperty(this, "buffer", []);

    _defineProperty(this, "isLoaded", false);

    _defineProperty(this, "handle", void 0);

    _defineProperty(this, "postMessageToWeb", void 0);

    _defineProperty(this, "setDebug", void 0);

    this.handle = new _WebRMIHandle.WebRMIHandle(webViewRef, registry, webshellDebug);
    this.postMessageToWeb = this.proxify('postMessageToWeb');
    this.setDebug = this.proxify('setDebug');
  }

  _createClass(BufferedWebRMIHandle, [{
    key: "proxify",
    value: function proxify(methodName) {
      var _this = this;

      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (_this.isLoaded) {
          _this.handle[methodName].apply(_this.handle, args);
        } else {
          _this.buffer.push({
            methodName: methodName,
            args: args
          });
        }
      };
    }
    /**
     * Flush all pending invocations.
     */

  }, {
    key: "flushPendingMessages",
    value: function flushPendingMessages() {
      this.isLoaded = true;
      var pack;

      while ((pack = this.buffer.pop()) !== undefined) {
        this.handle[pack.methodName].apply(this.handle, pack.args);
      }
    }
  }]);

  return BufferedWebRMIHandle;
}();

exports.BufferedWebRMIHandle = BufferedWebRMIHandle;
//# sourceMappingURL=BufferedWebRMIHandle.js.map