"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebRMIHandle = void 0;

var _WebRMIController2 = require("./WebRMIController");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["window.ReactNativeWebshell.debug=", ";"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["window.ReactNativeWebshell.postMessageToWeb(", ",", ",", ");"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WebRMIHandle = /*#__PURE__*/function (_WebRMIController) {
  _inherits(WebRMIHandle, _WebRMIController);

  var _super = _createSuper(WebRMIHandle);

  function WebRMIHandle(webViewRef, registry, reporter) {
    var _this;

    _classCallCheck(this, WebRMIHandle);

    _this = _super.call(this, webViewRef, reporter);

    _defineProperty(_assertThisInitialized(_this), "registry", void 0);

    _this.registry = registry;
    return _this;
  }

  _createClass(WebRMIHandle, [{
    key: "postMessageToWeb",
    value: function postMessageToWeb(feat, eventId, message) {
      if (!feat.hasWebHandler(eventId)) {
        this.reporter.dispatchError('WEBSH_FEAT_MISSING_WEB_HANDLER', feat.identifier, eventId);
        return;
      }

      if (!this.registry.hasFeature(feat)) {
        this.reporter.dispatchError('WEBSH_FEAT_MISSING_IN_SHELL', feat.identifier);
        return;
      }

      this.injectJavaScript(_templateObject(), feat.identifier, eventId, message);
    }
  }, {
    key: "setDebug",
    value: function setDebug(debug) {
      this.injectJavaScript(_templateObject2(), debug);
    }
  }]);

  return WebRMIHandle;
}(_WebRMIController2.WebRMIController);

exports.WebRMIHandle = WebRMIHandle;
//# sourceMappingURL=WebRMIHandle.js.map