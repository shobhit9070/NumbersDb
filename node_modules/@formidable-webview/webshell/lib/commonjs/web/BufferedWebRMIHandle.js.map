{"version":3,"sources":["BufferedWebRMIHandle.ts"],"names":["BufferedWebRMIHandle","webViewRef","registry","webshellDebug","handle","WebRMIHandle","postMessageToWeb","proxify","setDebug","methodName","args","isLoaded","apply","buffer","push","pack","pop","undefined"],"mappings":";;;;;;;AAIA;;;;;;;;;;IAOaA,oB;AAOX,gCACEC,UADF,EAEEC,QAFF,EAGEC,aAHF,EAIE;AAAA;;AAAA,oCAV6D,EAU7D;;AAAA,sCAT0B,KAS1B;;AAAA;;AAAA;;AAAA;;AACA,SAAKC,MAAL,GAAc,IAAIC,0BAAJ,CAAiBJ,UAAjB,EAA6BC,QAA7B,EAAuCC,aAAvC,CAAd;AACA,SAAKG,gBAAL,GAAwB,KAAKC,OAAL,CAAa,kBAAb,CAAxB;AACA,SAAKC,QAAL,GAAgB,KAAKD,OAAL,CAAa,UAAb,CAAhB;AACD;;;;4BAE6CE,U,EAAe;AAAA;;AAC3D,aAAO,YAAkB;AAAA,0CAAdC,IAAc;AAAdA,UAAAA,IAAc;AAAA;;AACvB,YAAI,KAAI,CAACC,QAAT,EAAmB;AACjB,UAAA,KAAI,CAACP,MAAL,CAAYK,UAAZ,EAA+BG,KAA/B,CAAqC,KAAI,CAACR,MAA1C,EAAkDM,IAAlD;AACD,SAFD,MAEO;AACL,UAAA,KAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;AAAEL,YAAAA,UAAU,EAAVA,UAAF;AAAcC,YAAAA,IAAI,EAAJA;AAAd,WAAjB;AACD;AACF,OAND;AAOD;AAED;;;;;;2CAGuB;AACrB,WAAKC,QAAL,GAAgB,IAAhB;AACA,UAAII,IAAJ;;AACA,aAAO,CAACA,IAAI,GAAG,KAAKF,MAAL,CAAYG,GAAZ,EAAR,MAA+BC,SAAtC,EAAiD;AAC/C,aAAKb,MAAL,CAAYW,IAAI,CAACN,UAAjB,EAA6BG,KAA7B,CAAmC,KAAKR,MAAxC,EAAgDW,IAAI,CAACL,IAArD;AACD;AACF","sourcesContent":["import React from 'react';\nimport FeatureRegistry from '../FeatureRegistry';\nimport Reporter from '../Reporter';\nimport { WebHandle } from '../types';\nimport { WebRMIHandle } from './WebRMIHandle';\n\ninterface DelayedInvocation<M extends keyof WebRMIHandle> {\n  methodName: M;\n  args: WebRMIHandle[M] extends Function ? Parameters<WebRMIHandle[M]> : never;\n}\n\nexport class BufferedWebRMIHandle implements WebHandle {\n  private buffer: Array<DelayedInvocation<keyof WebRMIHandle>> = [];\n  private isLoaded: boolean = false;\n  private handle: WebRMIHandle;\n  postMessageToWeb: WebRMIHandle['postMessageToWeb'];\n  setDebug: WebRMIHandle['setDebug'];\n\n  constructor(\n    webViewRef: React.RefObject<any>,\n    registry: FeatureRegistry<any>,\n    webshellDebug: Reporter\n  ) {\n    this.handle = new WebRMIHandle(webViewRef, registry, webshellDebug);\n    this.postMessageToWeb = this.proxify('postMessageToWeb');\n    this.setDebug = this.proxify('setDebug');\n  }\n\n  private proxify<M extends keyof WebRMIHandle>(methodName: M) {\n    return (...args: any) => {\n      if (this.isLoaded) {\n        this.handle[methodName as any].apply(this.handle, args as any);\n      } else {\n        this.buffer.push({ methodName, args });\n      }\n    };\n  }\n\n  /**\n   * Flush all pending invocations.\n   */\n  flushPendingMessages() {\n    this.isLoaded = true;\n    let pack: DelayedInvocation<any> | undefined;\n    while ((pack = this.buffer.pop()) !== undefined) {\n      this.handle[pack.methodName].apply(this.handle, pack.args);\n    }\n  }\n}\n"]}