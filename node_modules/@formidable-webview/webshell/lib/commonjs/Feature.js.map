{"version":3,"sources":["Feature.ts"],"names":["Feature","params","options","script","identifier","propSpecs","defaultOptions","webSpecs","eventId"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;AAkBA;;;;;;;;;;;;IAY8BA,O;AAK5B;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;AAIA;;;;AAIA;;;;AAIA;;;AAIA,mBACEC,MADF,EAKEC,OALF,EAME;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACA,SAAKC,MAAL,GAAcF,MAAM,CAACE,MAArB;AACA,SAAKC,UAAL,GAAkBH,MAAM,CAACG,UAAzB;AACA,SAAKC,SAAL,GAAiBJ,MAAM,CAACI,SAAxB;AACA,SAAKC,cAAL,GAAsBL,MAAM,CAACK,cAA7B;AACA,SAAKJ,OAAL,mCAAoBD,MAAM,CAACK,cAA3B,GAA8CJ,OAA9C;AACA,SAAKK,QAAL,GAAgBN,MAAM,CAACM,QAAvB;AACD;AAED;;;;;;;kCAGcC,O,EAAiB;AAC7B,aAAO,CAAC,CAAC,KAAKD,QAAL,CAAcC,OAAd,CAAT;AACD","sourcesContent":["import type { FeatureDefinition, PropsSpecs, WebHandlersSpecs } from './types';\n\n/**\n * A feature constructor function, aka class.\n *\n * @typeparam O - A type describing the shape of the JSON-serializable object that will be passed to the Web script.\n * @typeparam P - A type specifying the new properties added to the shell (capabilities to send message to the shell).\n * @typeparam W - A type specifying the Web handlers added to the shell (capabilities to send message to the Web script).\n *\n * @public\n */\nexport interface FeatureClass<\n  O extends {} = {},\n  P extends PropsSpecs<any, any> = {},\n  W extends WebHandlersSpecs<any> = {}\n> {\n  new (...args: O extends Partial<O> ? [] | [O] : [O]): Feature<O, P, W>;\n  name: string;\n  identifier: string;\n}\n/**\n * A feature encapsulates injectable behaviors in a WebView.\n *\n * @remarks\n * You should never instantiate that class directly. Use {@link FeatureBuilder} instead.\n *\n * @typeparam O - A type describing the shape of the JSON-serializable object that will be passed to the Web script.\n * @typeparam P - A type specifying the new properties added to the shell (capabilities to send message to the shell).\n * @typeparam W - A type specifying the Web handlers added to the shell (capabilities to send message to the Web script).\n *\n * @public\n */\nexport default abstract class Feature<\n  O extends {} = {},\n  P extends PropsSpecs<any, any> = {},\n  W extends WebHandlersSpecs<any> = {}\n> implements FeatureDefinition<O> {\n  /**\n   * The string containing valid ECMAScript 5 to be run in the WebView.\n   *\n   * @remarks\n   * The script must define a single function which only argument is of the\n   * type {@link WebjsContext}.\n   *\n   * It is recommended that you use eslint to validate this script syntax, and\n   * event better, unit-test the script. See our repository home page for more\n   * information.\n   */\n  readonly script: string;\n  /**\n   * A unique identifier of the feature. The convention is to use a reverse\n   * namespace domain ending with the feature name.\n   *\n   * @example\n   * org.formidable-webview/webshell.link-press\n   */\n  readonly identifier: string;\n  /**\n   * An object specifying which props this feature will add to the shell.\n   */\n  readonly propSpecs: P;\n  /**\n   * An object specifying which handlers this feature Web script will support.\n   */\n  readonly webSpecs: W;\n  /**\n   * These options will be shallow-merged with the options provided to the {@link FeatureClass}.\n   */\n  readonly defaultOptions: Required<O>;\n  /**\n   * The options that will be passed to the Web script.\n   */\n  readonly options: O;\n  protected constructor(\n    params: FeatureDefinition<O> & {\n      propSpecs: P;\n      webSpecs: W;\n    },\n    options: O\n  ) {\n    this.script = params.script;\n    this.identifier = params.identifier;\n    this.propSpecs = params.propSpecs;\n    this.defaultOptions = params.defaultOptions;\n    this.options = { ...params.defaultOptions, ...options };\n    this.webSpecs = params.webSpecs;\n  }\n\n  /**\n   * @internal\n   */\n  hasWebHandler(eventId: string) {\n    return !!this.webSpecs[eventId];\n  }\n}\n"]}