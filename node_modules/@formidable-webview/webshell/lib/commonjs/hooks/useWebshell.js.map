{"version":3,"sources":["useWebshell.ts"],"names":["parseJSONSafe","text","JSON","parse","e","isPostMessageObject","o","useWebMessageBus","registry","reporter","webshellDebug","onWebFeatureError","onMessage","otherProps","React","useState","isLoaderReady","setIsLoaderReady","domHandlers","getWebHandlers","handleOnWebMessage","useCallback","nativeEvent","parsedJSON","data","type","identifier","body","eventId","severity","propDef","getPropDefFromId","dispatchError","handlerName","name","handler","dispatchWebLog","Object","values","useWebHandle","webViewRef","useMemo","BufferedWebRMIHandle","useJavaScript","loader","injectedJavaScript","safeUserscript","assembledFeaturesScript","defaultProps","__DEV__","webshellStrictMode","useWebshell","features","webshellProps","props","localWebViewRef","useRef","resolvedWebViewRef","filteredFeatures","filter","f","WebFeaturesLoader","webHandleRef","userInjectedJavaScript","Reporter","FeatureRegistry","webHandle","useImperativeHandle","useEffect","syncDebug","setDebug","flushPendingMessages","filterWebViewProps","javaScriptEnabled","ref"],"mappings":"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","sourcesContent":["/* eslint-disable dot-notation */\nimport * as React from 'react';\nimport type { ComponentType, ElementRef } from 'react';\nimport type { NativeSyntheticEvent } from 'react-native';\nimport Feature from '../Feature';\nimport {\n  WebshellProps,\n  WebshellInvariantProps,\n  MinimalWebViewProps\n} from '../types';\nimport FeatureRegistry from '../FeatureRegistry';\nimport { BufferedWebRMIHandle } from '../web/BufferedWebRMIHandle';\nimport { WebFeaturesLoader } from '../web/WebFeaturesLoader';\nimport Reporter from '../Reporter';\n\ninterface WebViewMessage {\n  data: string;\n}\n\ninterface PostMessage {\n  identifier: string;\n  eventId: string;\n  type: 'feature' | 'error' | 'log' | 'init';\n  severity: 'warn' | 'info';\n  body: any;\n}\n\nfunction parseJSONSafe(text: string) {\n  try {\n    return (JSON.parse(text) as unknown) ?? null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction isPostMessageObject(o: unknown): o is PostMessage {\n  return (\n    typeof o === 'object' &&\n    o !== null &&\n    typeof o['type'] === 'string' &&\n    o['__isWebshellPostMessage'] === true\n  );\n}\n\nfunction useWebMessageBus(\n  registry: FeatureRegistry<any>,\n  reporter: Reporter,\n  {\n    webshellDebug,\n    onWebFeatureError,\n    onMessage,\n    ...otherProps\n  }: WebshellInvariantProps & MinimalWebViewProps\n) {\n  const [isLoaderReady, setIsLoaderReady] = React.useState(false);\n  const domHandlers = registry.getWebHandlers(otherProps);\n  const handleOnWebMessage = React.useCallback(\n    function handleOnWebMessage({\n      nativeEvent\n    }: NativeSyntheticEvent<WebViewMessage>) {\n      const parsedJSON = parseJSONSafe(nativeEvent.data);\n      if (isPostMessageObject(parsedJSON)) {\n        const { type, identifier, body, eventId, severity } = parsedJSON;\n        if (type === 'init') {\n          setIsLoaderReady(true);\n          return;\n        }\n        if (type === 'feature') {\n          const propDef = registry.getPropDefFromId(identifier, eventId);\n          if (!propDef) {\n            reporter.dispatchError(\n              'WEBSH_MISSING_SHELL_HANDLER',\n              identifier,\n              eventId\n            );\n            return;\n          }\n          const handlerName = propDef.name;\n          const handler =\n            typeof eventId === 'string' ? domHandlers[handlerName] : null;\n          if (typeof handler === 'function') {\n            handler(body);\n          }\n        } else if (type === 'error') {\n          // Handle as an error message\n          typeof onWebFeatureError === 'function' &&\n            onWebFeatureError(identifier, body);\n          reporter.dispatchError('WEBSH_SCRIPT_ERROR', identifier, body);\n        } else if (type === 'log') {\n          reporter.dispatchWebLog(severity, identifier, body);\n        }\n      } else {\n        typeof onMessage === 'function' && onMessage({ nativeEvent });\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...Object.values(domHandlers), onWebFeatureError, onMessage]\n  );\n  return {\n    handleOnWebMessage,\n    isLoaderReady\n  };\n}\n\nfunction useWebHandle(\n  webViewRef: React.RefObject<any>,\n  registry: FeatureRegistry<any>,\n  reporter: Reporter\n) {\n  return React.useMemo(\n    (): BufferedWebRMIHandle =>\n      new BufferedWebRMIHandle(webViewRef, registry, reporter),\n    [webViewRef, registry, reporter]\n  );\n}\n\nfunction useJavaScript(\n  loader: WebFeaturesLoader<any>,\n  injectedJavaScript: string\n) {\n  return React.useMemo(() => {\n    const safeUserscript =\n      typeof injectedJavaScript === 'string' ? injectedJavaScript : '';\n    return `(function(){\\n${safeUserscript}\\n${loader.assembledFeaturesScript};\\n})();true;`;\n  }, [injectedJavaScript, loader]);\n}\n\n/**\n * Parameters for {@link useWebshell} hook.\n *\n * @public\n */\nexport interface UseWebshellParams<\n  W extends MinimalWebViewProps,\n  F extends Feature<{}, {}, {}>[]\n> {\n  /**\n   * The list of feature instances to inject.\n   */\n  features: F;\n  /**\n   * The Webshell props, which extends WebView props with a few custom props.\n   */\n  props: WebshellProps<W, F>;\n  /**\n   * An optional reference object to the underlying WebView.\n   */\n  webViewRef?: ElementRef<any>;\n}\n\nconst defaultProps = {\n  webshellDebug: __DEV__,\n  webshellStrictMode: false\n};\n\n/**\n * Inject features into a `WebView`, enabling capabilities such\n * as:\n *\n * - handling messages from the Web environment;\n * - sending messages to the Web environment, see {@link WebHandle};\n * - running script in the Web environment.\n *\n * @remarks\n * - You should **always** pass all props returned by this hook to the\n * `WebView` component, and **never** override any of those props.\n * - If you need to pass props to the `WebView`, use the `props` parameter field.\n * - If you need to pass a reference to the `WebView`, pass this reference to the\n * `webViewRef` parameter field.\n *\n * @param param - A param object comprised of features, (webshell) props and\n * optionally a webViewRef object.\n * @returns Props for the `WebView` component.\n *\n * @typeparam C - The type of the `WebView` component.\n * @typeparam F - The type for a collection of features to inject.\n *\n * @example\n *\n * ```ts\n * import {\n *   useWebshell,\n *   HandleHashChangeFeature,\n *   HandleVisualViewportFeature\n * } from '@formidable-webview/webshell';\n *\n * const features = [\n *   new HandleHashChangeFeature(),\n *   new HandleVisualViewportFeature()\n * ]\n *\n * const MyCustomWebView = (props) => {\n *   const webViewProps = useWebshell({ features, props });\n *   return <WebView {...webViewProps} />;\n * }\n *\n * ```\n *\n * @public\n */\nexport default function useWebshell<\n  C extends ComponentType<any>,\n  F extends Feature<{}, {}, {}>[]\n>({\n  features,\n  props: webshellProps,\n  webViewRef\n}: UseWebshellParams<React.ComponentProps<C>, F>): React.ComponentProps<C> & {\n  ref: ElementRef<C>;\n} {\n  const localWebViewRef = React.useRef<any>();\n  const resolvedWebViewRef = (webViewRef as any) || localWebViewRef;\n  const filteredFeatures = React.useMemo(() => features.filter((f) => !!f), [\n    features\n  ]);\n  const loader = React.useMemo(() => new WebFeaturesLoader(filteredFeatures), [\n    filteredFeatures\n  ]);\n  const {\n    webHandleRef,\n    injectedJavaScript: userInjectedJavaScript,\n    webshellDebug = defaultProps.webshellDebug,\n    webshellStrictMode = defaultProps.webshellStrictMode,\n    ...props\n  } = webshellProps;\n  const reporter = React.useMemo(\n    () => new Reporter(webshellDebug, webshellStrictMode),\n    [webshellDebug, webshellStrictMode]\n  );\n  const registry = React.useMemo(\n    () => new FeatureRegistry(filteredFeatures, reporter),\n    [reporter, filteredFeatures]\n  );\n  const { handleOnWebMessage, isLoaderReady } = useWebMessageBus(\n    registry,\n    reporter,\n    props\n  );\n  const injectedJavaScript = useJavaScript(\n    loader,\n    userInjectedJavaScript as string\n  );\n  const webHandle = useWebHandle(resolvedWebViewRef, registry, reporter);\n  React.useImperativeHandle(webHandleRef, () => webHandle);\n  React.useEffect(\n    function syncDebug() {\n      webHandle.setDebug(webshellDebug);\n    },\n    [webshellDebug, webHandle]\n  );\n  React.useEffect(\n    function flushPendingMessages() {\n      if (isLoaderReady) {\n        webHandle.flushPendingMessages();\n      }\n    },\n    [isLoaderReady, webHandle]\n  );\n  return ({\n    ...registry.filterWebViewProps<React.ComponentProps<C>>(webshellProps),\n    injectedJavaScript,\n    javaScriptEnabled: true,\n    onMessage: handleOnWebMessage,\n    ref: resolvedWebViewRef\n  } as unknown) as React.ComponentProps<C>;\n}\n"]}