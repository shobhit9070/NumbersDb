"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useWebshell;

var React = _interopRequireWildcard(require("react"));

var _FeatureRegistry = _interopRequireDefault(require("../FeatureRegistry"));

var _BufferedWebRMIHandle = require("../web/BufferedWebRMIHandle");

var _WebFeaturesLoader = require("../web/WebFeaturesLoader");

var _Reporter = _interopRequireDefault(require("../Reporter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function parseJSONSafe(text) {
  try {
    var _ref;

    return (_ref = JSON.parse(text)) !== null && _ref !== void 0 ? _ref : null;
  } catch (e) {
    return null;
  }
}

function isPostMessageObject(o) {
  return _typeof(o) === 'object' && o !== null && typeof o['type'] === 'string' && o['__isWebshellPostMessage'] === true;
}

function useWebMessageBus(registry, reporter, _ref2) {
  var webshellDebug = _ref2.webshellDebug,
      onWebFeatureError = _ref2.onWebFeatureError,
      onMessage = _ref2.onMessage,
      otherProps = _objectWithoutProperties(_ref2, ["webshellDebug", "onWebFeatureError", "onMessage"]);

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isLoaderReady = _React$useState2[0],
      setIsLoaderReady = _React$useState2[1];

  var domHandlers = registry.getWebHandlers(otherProps);
  var handleOnWebMessage = React.useCallback(function handleOnWebMessage(_ref3) {
    var nativeEvent = _ref3.nativeEvent;
    var parsedJSON = parseJSONSafe(nativeEvent.data);

    if (isPostMessageObject(parsedJSON)) {
      var type = parsedJSON.type,
          identifier = parsedJSON.identifier,
          body = parsedJSON.body,
          eventId = parsedJSON.eventId,
          severity = parsedJSON.severity;

      if (type === 'init') {
        setIsLoaderReady(true);
        return;
      }

      if (type === 'feature') {
        var propDef = registry.getPropDefFromId(identifier, eventId);

        if (!propDef) {
          reporter.dispatchError('WEBSH_MISSING_SHELL_HANDLER', identifier, eventId);
          return;
        }

        var handlerName = propDef.name;
        var handler = typeof eventId === 'string' ? domHandlers[handlerName] : null;

        if (typeof handler === 'function') {
          handler(body);
        }
      } else if (type === 'error') {
        // Handle as an error message
        typeof onWebFeatureError === 'function' && onWebFeatureError(identifier, body);
        reporter.dispatchError('WEBSH_SCRIPT_ERROR', identifier, body);
      } else if (type === 'log') {
        reporter.dispatchWebLog(severity, identifier, body);
      }
    } else {
      typeof onMessage === 'function' && onMessage({
        nativeEvent: nativeEvent
      });
    }
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [].concat(_toConsumableArray(Object.values(domHandlers)), [onWebFeatureError, onMessage]));
  return {
    handleOnWebMessage: handleOnWebMessage,
    isLoaderReady: isLoaderReady
  };
}

function useWebHandle(webViewRef, registry, reporter) {
  return React.useMemo(function () {
    return new _BufferedWebRMIHandle.BufferedWebRMIHandle(webViewRef, registry, reporter);
  }, [webViewRef, registry, reporter]);
}

function useJavaScript(loader, injectedJavaScript) {
  return React.useMemo(function () {
    var safeUserscript = typeof injectedJavaScript === 'string' ? injectedJavaScript : '';
    return "(function(){\n".concat(safeUserscript, "\n").concat(loader.assembledFeaturesScript, ";\n})();true;");
  }, [injectedJavaScript, loader]);
}
/**
 * Parameters for {@link useWebshell} hook.
 *
 * @public
 */


var defaultProps = {
  webshellDebug: __DEV__,
  webshellStrictMode: false
};
/**
 * Inject features into a `WebView`, enabling capabilities such
 * as:
 *
 * - handling messages from the Web environment;
 * - sending messages to the Web environment, see {@link WebHandle};
 * - running script in the Web environment.
 *
 * @remarks
 * - You should **always** pass all props returned by this hook to the
 * `WebView` component, and **never** override any of those props.
 * - If you need to pass props to the `WebView`, use the `props` parameter field.
 * - If you need to pass a reference to the `WebView`, pass this reference to the
 * `webViewRef` parameter field.
 *
 * @param param - A param object comprised of features, (webshell) props and
 * optionally a webViewRef object.
 * @returns Props for the `WebView` component.
 *
 * @typeparam C - The type of the `WebView` component.
 * @typeparam F - The type for a collection of features to inject.
 *
 * @example
 *
 * ```ts
 * import {
 *   useWebshell,
 *   HandleHashChangeFeature,
 *   HandleVisualViewportFeature
 * } from '@formidable-webview/webshell';
 *
 * const features = [
 *   new HandleHashChangeFeature(),
 *   new HandleVisualViewportFeature()
 * ]
 *
 * const MyCustomWebView = (props) => {
 *   const webViewProps = useWebshell({ features, props });
 *   return <WebView {...webViewProps} />;
 * }
 *
 * ```
 *
 * @public
 */

function useWebshell(_ref4) {
  var features = _ref4.features,
      webshellProps = _ref4.props,
      webViewRef = _ref4.webViewRef;
  var localWebViewRef = React.useRef();
  var resolvedWebViewRef = webViewRef || localWebViewRef;
  var filteredFeatures = React.useMemo(function () {
    return features.filter(function (f) {
      return !!f;
    });
  }, [features]);
  var loader = React.useMemo(function () {
    return new _WebFeaturesLoader.WebFeaturesLoader(filteredFeatures);
  }, [filteredFeatures]);

  var webHandleRef = webshellProps.webHandleRef,
      userInjectedJavaScript = webshellProps.injectedJavaScript,
      _webshellProps$webshe = webshellProps.webshellDebug,
      webshellDebug = _webshellProps$webshe === void 0 ? defaultProps.webshellDebug : _webshellProps$webshe,
      _webshellProps$webshe2 = webshellProps.webshellStrictMode,
      webshellStrictMode = _webshellProps$webshe2 === void 0 ? defaultProps.webshellStrictMode : _webshellProps$webshe2,
      props = _objectWithoutProperties(webshellProps, ["webHandleRef", "injectedJavaScript", "webshellDebug", "webshellStrictMode"]);

  var reporter = React.useMemo(function () {
    return new _Reporter["default"](webshellDebug, webshellStrictMode);
  }, [webshellDebug, webshellStrictMode]);
  var registry = React.useMemo(function () {
    return new _FeatureRegistry["default"](filteredFeatures, reporter);
  }, [reporter, filteredFeatures]);

  var _useWebMessageBus = useWebMessageBus(registry, reporter, props),
      handleOnWebMessage = _useWebMessageBus.handleOnWebMessage,
      isLoaderReady = _useWebMessageBus.isLoaderReady;

  var injectedJavaScript = useJavaScript(loader, userInjectedJavaScript);
  var webHandle = useWebHandle(resolvedWebViewRef, registry, reporter);
  React.useImperativeHandle(webHandleRef, function () {
    return webHandle;
  });
  React.useEffect(function syncDebug() {
    webHandle.setDebug(webshellDebug);
  }, [webshellDebug, webHandle]);
  React.useEffect(function flushPendingMessages() {
    if (isLoaderReady) {
      webHandle.flushPendingMessages();
    }
  }, [isLoaderReady, webHandle]);
  return _objectSpread(_objectSpread({}, registry.filterWebViewProps(webshellProps)), {}, {
    injectedJavaScript: injectedJavaScript,
    javaScriptEnabled: true,
    onMessage: handleOnWebMessage,
    ref: resolvedWebViewRef
  });
}
//# sourceMappingURL=useWebshell.js.map