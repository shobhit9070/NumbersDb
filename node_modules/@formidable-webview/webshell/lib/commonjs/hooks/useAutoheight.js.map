{"version":3,"sources":["useAutoheight.ts"],"names":["initialDimensions","width","undefined","height","overridenWebViewProps","scalesPageToFit","showsVerticalScrollIndicator","disableScrollViewPanResponder","contentMode","overridenWebViewKeys","Object","keys","initialState","implementation","contentSize","syncState","lastFrameChangedWidth","viewportWidth","useDevFeedbackEffect","webshellProps","autoHeightParams","state","numberOfEventsRef","React","useRef","webshellDebug","forbiddenWebViewProps","map","key","reduce","prev","value","useEffect","warnOverridenProps","forbiddenKey","console","warn","useAutoheight","name","values","debugDOMHTMLDimensions","info","current","useAutoheightState","initialHeight","source","useState","setState","__DEV__","resetHeightOnSourceChanges","uri","html","params","userExplicitWidth","resetHeightOnViewportWidthChange","style","onNavigationStateChange","onDOMHTMLDimensions","passedProps","shouldReinitNextFrameHeight","handleOnDOMHTMLDimensions","useCallback","htmlDimensions","prevState","layoutViewport","content","autoHeightStyle","useMemo","alignSelf","resetLastFrameChangedWidth","timeout","setTimeout","clearTimeout","autoheightWebshellProps","resizeImplementation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  DOMRectSize,\n  ExtractFeatureFromClass,\n  MinimalWebViewProps,\n  WebshellProps\n} from '../types';\nimport type {\n  HTMLDimensions,\n  HandleHTMLDimensionsFeature,\n  HTMLDimensionsImplementation\n} from '../features/HandleHTMLDimensionsFeature';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport Feature from '../Feature';\n\nconst initialDimensions = { width: undefined, height: undefined };\n\nconst overridenWebViewProps = {\n  scalesPageToFit: false,\n  showsVerticalScrollIndicator: false,\n  disableScrollViewPanResponder: true,\n  contentMode: 'mobile'\n} as const;\n\nconst overridenWebViewKeys = Object.keys(overridenWebViewProps);\n\n/**\n * The state of synchronization between viewport and content size:\n *\n * - `init`: the initial state;\n * - `syncing`: the content size is being determined;\n * - `synced`: the viewport size has been adjusted to content size.\n *\n * @public\n */\nexport type AutoheightSyncState = 'init' | 'syncing' | 'synced';\n\n/**\n * The state returned by {@link useAutoheight} hook.\n *\n * @typeparam S - The type of the `Webshell` props used by this hook.\n *\n * @public\n */\nexport interface AutoheightState<\n  S extends WebshellProps<\n    MinimalWebViewProps,\n    [ExtractFeatureFromClass<typeof HandleHTMLDimensionsFeature>]\n  >\n> {\n  /**\n   * The props to inject into webshell in order to support \"autoheight\"\n   * behavior.\n   */\n  autoheightWebshellProps: Pick<\n    S,\n    | 'webshellDebug'\n    | 'onDOMHTMLDimensions'\n    | 'style'\n    | 'scalesPageToFit'\n    | 'showsVerticalScrollIndicator'\n    | 'disableScrollViewPanResponder'\n    | 'contentMode'\n  > &\n    Partial<S>;\n  /**\n   * The implementation used to generate resize events.\n   */\n  resizeImplementation: HTMLDimensionsImplementation | null;\n  /**\n   * An object describing the content size. When the size is not yet known,\n   * this object fields will be undefined.\n   */\n  contentSize: Partial<DOMRectSize>;\n  /**\n   * The state of synchronization between viewport and content size:\n   *\n   * - `'init'`: the initial, \"onMount\" state;\n   * - `'syncing'`: the content size is being determined;\n   * - `'synced'`: the viewport size has been adjusted to content size.\n   *\n   */\n  syncState: AutoheightSyncState;\n}\n\n/**\n * Named parameters for autoheight hook.\n *\n * @typeparam S - The type of the `Webshell` props used by this hook.\n *\n * @public\n */\nexport interface AutoheightParams<\n  S extends WebshellProps<MinimalWebViewProps, Feature<any, any>[]>\n> {\n  /**\n   * It's best to pass all props directed to `Webshell` here. This is\n   * advised because the hook might react to specific props and warn you of\n   * some incompatibilities.\n   */\n  webshellProps: S;\n  /**\n   * By default, the width of `Webshell` will grow to the horizontal space available.\n   * This is realized with `width: '100%'` and `alignSelf: 'stretch'`.\n   * If you need to set explicit width, do it here.\n   */\n  width?: number;\n  /**\n   * The height occupied by the `WebView` prior to knowing its content height.\n   * It will be reused each time the source changes.\n   *\n   * @defaultValue 0\n   */\n  initialHeight?: number;\n  /**\n   * When a width change is detected on viewport, the height of the `WebView`\n   * will be set to `undefined` for a few milliseconds. This will allow the\n   * best handling of height constraint in edge-cases with, for example,\n   * content expanding vertically (display: flex), at the cost of a small flash.\n   *\n   * @defaultValue true\n   */\n  resetHeightOnViewportWidthChange?: boolean;\n}\ninterface AutoheightInternalState {\n  implementation: HTMLDimensionsImplementation | null;\n  contentSize: Partial<DOMRectSize>;\n  syncState: AutoheightSyncState;\n  lastFrameChangedWidth: boolean;\n  viewportWidth: number;\n}\n\nconst initialState: AutoheightInternalState = {\n  implementation: null,\n  contentSize: initialDimensions,\n  syncState: 'init',\n  lastFrameChangedWidth: false,\n  viewportWidth: 0\n};\n\nfunction useDevFeedbackEffect({\n  autoHeightParams: { webshellProps },\n  state: {\n    implementation,\n    contentSize: { width, height }\n  }\n}: {\n  autoHeightParams: AutoheightParams<WebshellProps<MinimalWebViewProps, []>>;\n  state: AutoheightInternalState;\n}) {\n  const numberOfEventsRef = React.useRef(0);\n  const { webshellDebug } = webshellProps;\n  const forbiddenWebViewProps = overridenWebViewKeys\n    .map((key) => [key, webshellProps[key]])\n    .reduce((prev, [key, value]) => {\n      prev[key] = value;\n      return prev;\n    }, {} as any);\n  React.useEffect(\n    function warnOverridenProps() {\n      for (const forbiddenKey of overridenWebViewKeys) {\n        if (\n          forbiddenWebViewProps[forbiddenKey] !== undefined &&\n          forbiddenWebViewProps[forbiddenKey] !==\n            overridenWebViewProps[forbiddenKey]\n        ) {\n          console.warn(\n            `${useAutoheight.name}: You cannot set \"${forbiddenKey}\" prop to \"${webshellProps[forbiddenKey]}\" with autoheight hook. The value will be overriden to \"${overridenWebViewProps[forbiddenKey]}\".`\n          );\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [webshellDebug, ...Object.values(forbiddenWebViewProps)]\n  );\n  React.useEffect(\n    function debugDOMHTMLDimensions() {\n      webshellDebug &&\n        console.info(\n          `${\n            useAutoheight.name\n          }: DOMHTMLDimensions event #${++numberOfEventsRef.current} (implementation: ${implementation}, content width: ${width}, content height: ${height})`\n        );\n    },\n    [webshellDebug, implementation, height, width]\n  );\n}\n\nfunction useAutoheightState<\n  S extends WebshellProps<\n    MinimalWebViewProps,\n    [ExtractFeatureFromClass<typeof HandleHTMLDimensionsFeature>]\n  >\n>(autoHeightParams: AutoheightParams<S>) {\n  const { webshellProps, initialHeight } = autoHeightParams;\n  const { source = {}, webshellDebug } = webshellProps;\n  const [state, setState] = React.useState<AutoheightInternalState>(\n    initialState\n  );\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDevFeedbackEffect({ autoHeightParams, state });\n  }\n  React.useEffect(\n    function resetHeightOnSourceChanges() {\n      setState(({ contentSize, viewportWidth }) => ({\n        viewportWidth,\n        contentSize: {\n          height: undefined,\n          width: contentSize.width\n        },\n        implementation: null,\n        syncState: 'syncing',\n        lastFrameChangedWidth: false\n      }));\n      __DEV__ &&\n        webshellDebug &&\n        console.info(\n          `${useAutoheight.name}: source change detected, resetting height to ${initialHeight}dp.`\n        );\n    },\n    [source.uri, source.html, webshellDebug, initialHeight]\n  );\n  if (__DEV__) {\n  }\n  return { state, setState };\n}\n\n/**\n *\n * This hook will provide props to inject in a shell component to implement an \"autoheight\" behavior.\n * It requires {@link HandleHTMLDimensionsFeature} to have be instantiated in the shell.\n * Also recommend (see remarks):\n *\n * - {@link ForceElementSizeFeature},\n * - {@link ForceResponsiveViewportFeature}.\n *\n * @remarks\n * This hook has caveats you must understand:\n *\n * - Because the viewport height is now bound to the content heigh, you cannot\n *   and must not have an element which height depends on viewport, such as\n *   when using `vh` unit or `height: 100%;` on body. That will either create\n *   an infinite loop, or a zero-height page (this happens for Wikipedia).\n *   Hence, it is strongly advised that you use autoheight only with content\n *   you have been able to test. This can be worked around by forcing body\n *   height to 'auto', see {@link ForceElementSizeFeature}.\n * - In some circumstances, the mobile browser might use a virtual\n *   viewport much larger then the available width in the `<WebView />`, often\n *   around 980px for websites which have been built for desktop. For\n *   this autoheight component to be reliable, you must ensure that the\n *   content has a [meta viewport element](https://www.w3schools.com/css/css_rwd_viewport.asp)\n *   in the header. You can enforce this behavior with {@link ForceResponsiveViewportFeature}.\n *\n * @example\n *\n * ```tsx\n * export default function MinimalAutoheightWebView(\n *   webshellProps: ComponentProps<typeof Webshell>\n * ) {\n *   const { autoheightWebshellProps } = useAutoheight({\n *     webshellProps\n *   });\n *   return <Webshell {...autoheightWebshellProps} />;\n * }\n * ```\n *\n * @param params - The parameters to specify autoheight behavior.\n * @typeparam S - The type of the `Webshell` props used by this hook.\n * @returns - An object to implement autoheight behavior.\n *\n * @public\n */\nexport default function useAutoheight<\n  S extends WebshellProps<\n    MinimalWebViewProps,\n    [ExtractFeatureFromClass<typeof HandleHTMLDimensionsFeature>]\n  >\n>(params: AutoheightParams<S>): AutoheightState<S> {\n  const {\n    webshellProps,\n    initialHeight = 0,\n    width: userExplicitWidth,\n    resetHeightOnViewportWidthChange = true\n  } = params;\n  const {\n    style,\n    onNavigationStateChange,\n    scalesPageToFit,\n    webshellDebug,\n    onDOMHTMLDimensions,\n    ...passedProps\n  } = webshellProps;\n  const { state, setState } = useAutoheightState(params);\n  const {\n    contentSize: { height },\n    implementation,\n    lastFrameChangedWidth\n  } = state;\n  const shouldReinitNextFrameHeight =\n    typeof userExplicitWidth !== 'number' &&\n    lastFrameChangedWidth &&\n    resetHeightOnViewportWidthChange;\n  const handleOnDOMHTMLDimensions = React.useCallback(\n    function handleOnDOMHTMLDimensions(htmlDimensions: HTMLDimensions) {\n      setState((prevState) => {\n        return {\n          viewportWidth: htmlDimensions.layoutViewport.width,\n          implementation: htmlDimensions.implementation,\n          contentSize: htmlDimensions.content,\n          syncState: 'synced',\n          lastFrameChangedWidth:\n            prevState.viewportWidth !== htmlDimensions.layoutViewport.width\n        };\n      });\n      typeof onDOMHTMLDimensions === 'function' &&\n        onDOMHTMLDimensions(htmlDimensions);\n    },\n    [setState, onDOMHTMLDimensions]\n  );\n  const autoHeightStyle = React.useMemo<StyleProp<ViewStyle>>(\n    () => [\n      style as StyleProp<ViewStyle>,\n      {\n        width:\n          typeof userExplicitWidth === 'number' ? userExplicitWidth : '100%',\n        height: shouldReinitNextFrameHeight\n          ? undefined\n          : typeof height === 'number'\n          ? height\n          : initialHeight,\n        alignSelf: 'stretch'\n      }\n    ],\n    [\n      height,\n      userExplicitWidth,\n      initialHeight,\n      style,\n      shouldReinitNextFrameHeight\n    ]\n  );\n  React.useEffect(\n    function resetLastFrameChangedWidth() {\n      const timeout = setTimeout(\n        () =>\n          setState((prevState) => ({\n            ...prevState,\n            lastFrameChangedWidth: false\n          })),\n        50\n      );\n      return () => clearTimeout(timeout);\n    },\n    [shouldReinitNextFrameHeight, setState]\n  );\n  return {\n    autoheightWebshellProps: {\n      ...passedProps,\n      webshellDebug,\n      onDOMHTMLDimensions: handleOnDOMHTMLDimensions,\n      style: autoHeightStyle,\n      ...overridenWebViewProps\n    } as AutoheightState<S>['autoheightWebshellProps'],\n    resizeImplementation: implementation,\n    contentSize: state.contentSize,\n    syncState: state.syncState\n  };\n}\n"]}