{"version":3,"sources":["makeWebshell.tsx"],"names":["defaultProps","webshellDebug","__DEV__","webshellStrictMode","makeWebshell","WebView","features","Webshell","webViewRef","props","webViewProps","React","createElement","forwardRef","ref","localWebViewRef","useRef"],"mappings":";;;;;;;;;AAAA;;AAQA;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAEC,OADI;AAEnBC,EAAAA,kBAAkB,EAAE;AAFD,CAArB;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCe,SAASC,YAAT,CAGbC,OAHa,EAGwC;AAAA,oCAAtCC,QAAsC;AAAtCA,IAAAA,QAAsC;AAAA;;AACrD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,OAKX;AAAA,QAJJC,UAII,QAJJA,UAII;AAAA,QAHDC,KAGC;;AACJ,QAAMC,YAAY,GAAG,6BAAY;AAAEJ,MAAAA,QAAQ,EAARA,QAAF;AAAYG,MAAAA,KAAK,EAALA,KAAZ;AAAmBD,MAAAA,UAAU,EAAVA;AAAnB,KAAZ,CAArB;AACA,wBAAOG,KAAK,CAACC,aAAN,CAAoBP,OAApB,EAA6BK,YAA7B,CAAP;AACD,GARD;;AASAH,EAAAA,QAAQ,CAACP,YAAT,GAAwBA,YAAxB;AACA,sBAAOW,KAAK,CAACE,UAAN,CAGL,UAACJ,KAAD,EAAQK,GAAR,EAAgB;AAChB,QAAMC,eAAe,GAAGJ,KAAK,CAACK,MAAN,EAAxB;AACA,wBACE,oBAAC,QAAD;AACE,MAAA,UAAU,EAAEF,GAAG,IAAIC;AADrB,OAEON,KAFP,EADF;AAMD,GAXM,CAAP;AAYD","sourcesContent":["import * as React from 'react';\nimport type { ComponentType, ElementRef, ComponentPropsWithRef } from 'react';\nimport Feature from './Feature';\nimport type {\n  WebshellProps,\n  MinimalWebViewProps,\n  WebshellComponent\n} from './types';\nimport useWebshell from './hooks/useWebshell';\n\nconst defaultProps = {\n  webshellDebug: __DEV__,\n  webshellStrictMode: false\n};\n\n/**\n * Creates a React component which decorates `WebView` component with additional\n * capabilities such as:\n *\n * - handling messages from the Web environment;\n * - sending messages to the Web environment, see {@link WebHandle};\n * - running script in the Web environment.\n *\n * @param WebView - A `WebView` component, typically exported from `react-native-webview`.\n * @param features - Features to inject in the `WebView`.\n *\n * @typeparam C - The type of the `WebView` component.\n * @typeparam F - The type for a collection of features to inject.\n *\n * @example\n *\n * ```ts\n * import {\n *   makeWebshell,\n *   HandleHashChangeFeature,\n *   HandleVisualViewportFeature\n * } from '@formidable-webview/webshell';\n *\n * const features = [\n *   new HandleHashChangeFeature(),\n *   new HandleVisualViewportFeature()\n * ]\n *\n * const Webshell = makeWebshell(\n *   WebView,\n *   ...features\n * );\n * ```\n *\n * @public\n */\nexport default function makeWebshell<\n  C extends ComponentType<any>,\n  F extends Feature<{}, {}, {}>[]\n>(WebView: C, ...features: F): WebshellComponent<C, F> {\n  const Webshell = ({\n    webViewRef,\n    ...props\n  }: WebshellProps<MinimalWebViewProps, F> & {\n    webViewRef: ElementRef<any>;\n  }) => {\n    const webViewProps = useWebshell({ features, props, webViewRef });\n    return React.createElement(WebView, webViewProps);\n  };\n  Webshell.defaultProps = defaultProps;\n  return React.forwardRef<\n    ElementRef<C>,\n    WebshellProps<ComponentPropsWithRef<C>, F>\n  >((props, ref) => {\n    const localWebViewRef = React.useRef();\n    return (\n      <Webshell\n        webViewRef={ref || localWebViewRef}\n        {...(props as WebshellProps<ComponentPropsWithRef<any>, F>)}\n      />\n    );\n  }) as any;\n}\n"]}