"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = makeWebshell;

var React = _interopRequireWildcard(require("react"));

var _useWebshell = _interopRequireDefault(require("./hooks/useWebshell"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var defaultProps = {
  webshellDebug: __DEV__,
  webshellStrictMode: false
};
/**
 * Creates a React component which decorates `WebView` component with additional
 * capabilities such as:
 *
 * - handling messages from the Web environment;
 * - sending messages to the Web environment, see {@link WebHandle};
 * - running script in the Web environment.
 *
 * @param WebView - A `WebView` component, typically exported from `react-native-webview`.
 * @param features - Features to inject in the `WebView`.
 *
 * @typeparam C - The type of the `WebView` component.
 * @typeparam F - The type for a collection of features to inject.
 *
 * @example
 *
 * ```ts
 * import {
 *   makeWebshell,
 *   HandleHashChangeFeature,
 *   HandleVisualViewportFeature
 * } from '@formidable-webview/webshell';
 *
 * const features = [
 *   new HandleHashChangeFeature(),
 *   new HandleVisualViewportFeature()
 * ]
 *
 * const Webshell = makeWebshell(
 *   WebView,
 *   ...features
 * );
 * ```
 *
 * @public
 */

function makeWebshell(WebView) {
  for (var _len = arguments.length, features = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    features[_key - 1] = arguments[_key];
  }

  var Webshell = function Webshell(_ref) {
    var webViewRef = _ref.webViewRef,
        props = _objectWithoutProperties(_ref, ["webViewRef"]);

    var webViewProps = (0, _useWebshell["default"])({
      features: features,
      props: props,
      webViewRef: webViewRef
    });
    return /*#__PURE__*/React.createElement(WebView, webViewProps);
  };

  Webshell.defaultProps = defaultProps;
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var localWebViewRef = React.useRef();
    return /*#__PURE__*/React.createElement(Webshell, _extends({
      webViewRef: ref || localWebViewRef
    }, props));
  });
}
//# sourceMappingURL=makeWebshell.js.map