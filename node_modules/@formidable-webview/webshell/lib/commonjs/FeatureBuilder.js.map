{"version":3,"sources":["FeatureBuilder.ts"],"names":["FeatureBuilder","config","script","TypeError","propName","eventId","propDefinition","name","featureIdentifier","identifier","type","propSpec","__propSpecs","__webSpecs","async","propSpecs","webSpecs","defaultOptions","ctor","Feature","Object","defineProperty","configurable","enumerable","writable","value"],"mappings":";;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;IASqBA,c;AAOnB;;;;AAIA,0BAAmBC,MAAnB,EAAoD;AAAA;;AAAA;;AAClD,SAAKA,MAAL,GAAcA,MAAd;;AACA,QAAI,OAAOA,MAAM,CAACC,MAAd,KAAyB,UAA7B,EAAyC;AACvC,YAAM,IAAIC,SAAJ,CACJ,qFACE,gFADF,GAEE,sFAHE,CAAN;AAKD;AACF;AACD;;;;;;;;;;;;;;;;;qCAcEC,Q,EAEA;AAAA,UADAC,OACA,uEADkB,SAClB;AACA,UAAMC,cAAiD,GAAG;AACxDD,QAAAA,OAAO,EAAPA,OADwD;AAExDE,QAAAA,IAAI,EAAEH,QAFkD;AAGxDI,QAAAA,iBAAiB,EAAE,KAAKP,MAAL,CAAYQ,UAHyB;AAIxDC,QAAAA,IAAI,EAAE;AAJkD,OAA1D;;AAMA,UAAMC,QAAQ,uBACXP,QADW,EACAE,cADA,CAAd;;AAGA,aAAO,IAAIN,cAAJ,iCACF,KAAKC,MADH;AAELW,QAAAA,WAAW,kCACL,KAAKX,MAAL,CAAYW,WAAZ,IAA2B,EADtB,GAEND,QAFM;AAFN,SAAP;AAOD;AACD;;;;;;;;;;;;mCASyDN,O,EAAY;AACnE,aAAO,IAAIL,cAAJ,iCAKF,KAAKC,MALH;AAMLY,QAAAA,UAAU,kCACJ,KAAKZ,MAAL,CAAYY,UAAZ,IAA0B,EADtB,2BAEPR,OAFO,EAEG;AAAES,UAAAA,KAAK,EAAE,KAAT;AAAgBT,UAAAA,OAAO,EAAPA;AAAhB,SAFH;AANL,SAAP;AAWD;AACD;;;;;;4BAG+B;AAAA;;AAAA,yBAOzB,KAAKJ,MAPoB;AAAA,UAE3BC,MAF2B,gBAE3BA,MAF2B;AAAA,UAGfM,iBAHe,gBAG3BC,UAH2B;AAAA,UAIdM,SAJc,gBAI3BH,WAJ2B;AAAA,UAKfI,QALe,gBAK3BH,UAL2B;AAAA,UAM3BI,cAN2B,gBAM3BA,cAN2B;AAQ7B,UAAMC,IAAI;AAAA;;AAAA;;AAER,wBAA4D;AAAA;;AAAA,mCAExD;AACEhB,YAAAA,MAAM,EAANA,MADF;AAEEO,YAAAA,UAAU,EAAED,iBAFd;AAGES,YAAAA,cAAc,EAAdA,cAHF;AAIEF,YAAAA,SAAS,EAAGA,SAAS,IAAI,EAJ3B;AAKEC,YAAAA,QAAQ,EAAGA,QAAQ,IAAI;AALzB,WAFwD,EASvD,sDAAW,EAT4C;AAW3D;;AAbO;AAAA,QAAiBG,oBAAjB,yCACYX,iBADZ,SAAV;AAeAY,MAAAA,MAAM,CAACC,cAAP,CAAsBH,IAAtB,EAA4B,aAA5B,EAA2C;AACzCI,QAAAA,YAAY,EAAE,IAD2B;AAEzCC,QAAAA,UAAU,EAAE,KAF6B;AAGzCC,QAAAA,QAAQ,EAAE,KAH+B;AAIzCC,QAAAA,KAAK,oBAAajB,iBAAb;AAJoC,OAA3C;AAMA,aAAOU,IAAP;AACD","sourcesContent":["/* eslint-disable no-spaced-func */\nimport Feature from './Feature';\nimport type { FeatureClass } from './Feature';\nimport type {\n  FeatureDefinition,\n  PropDefinition,\n  PropsSpecs,\n  WebHandlerDefinition,\n  WebHandlersSpecs\n} from './types';\n\n/**\n * See {@link FeatureBuilder}.\n *\n * @typeparam O - A type describing the shape of the JSON-serializable object that will be passed to the Web script.\n *\n * @public\n */\nexport interface FeatureBuilderConfig<O extends {}>\n  extends FeatureDefinition<O> {\n  /**\n   * @internal\n   */\n  __propSpecs?: PropsSpecs<any, any>;\n  /**\n   * @internal\n   */\n  __webSpecs?: WebHandlersSpecs<any>;\n}\n\n/**\n * A utility to create feature classes.\n *\n * @typeparam O - A type describing the shape of the JSON-serializable object that will be passed to the Web script.\n * @typeparam S - A type specifying the new properties added to the shell (capabilities to send message to the shell).\n * @typeparam W - A type specifying the Web handlers added to the shell (capabilities to send message to the Web script).\n *\n * @public\n */\nexport default class FeatureBuilder<\n  O extends {} = {},\n  S extends PropsSpecs<any, any> = {},\n  W extends WebHandlersSpecs<any> = {}\n> {\n  private config: FeatureBuilderConfig<O>;\n\n  /**\n   *\n   * @param config - An object to specify attributes of the feature.\n   */\n  public constructor(config: FeatureBuilderConfig<O>) {\n    this.config = config;\n    if (typeof config.script === 'function') {\n      throw new TypeError(\n        '[FeatureBuilder]: config.script must be a string. If you are trying to import a ' +\n          'webjs file such as in the docs, you need to setup babel-plugin-inline-import. ' +\n          'See our guide here: https://formidable-webview.github.io/webshell/docs/tooling#babel'\n      );\n    }\n  }\n  /**\n   * Instruct that the shell will receive events from the Web, and provide a\n   * new handler prop for that purpose.\n   *\n   * @param propName - The name of the handler prop added to the shell.\n   * It is advised to follow the convention of prefixing all these handlers\n   * with `onDOM` or `onWeb` to avoid collisions with `WebView` own props.\n   * @param eventId - A unique identifier for the event received by the shell.\n   * If none is provided, fallback to `\"default\"`.\n   *\n   * @typeparam N - A type to define the name of the prop.\n   * @typeparam P - A type describing the shape of payloads sent to shell handlers.\n   */\n  withShellHandler<N extends string, P>(\n    propName: N,\n    eventId: string = 'default'\n  ) {\n    const propDefinition: PropDefinition<N, (p: P) => void> = {\n      eventId,\n      name: propName,\n      featureIdentifier: this.config.identifier,\n      type: 'handler'\n    };\n    const propSpec = {\n      [propName]: propDefinition\n    } as PropsSpecs<N, typeof propDefinition>;\n    return new FeatureBuilder<O, S & PropsSpecs<N, (p: P) => void>, W>({\n      ...this.config,\n      __propSpecs: {\n        ...(this.config.__propSpecs || {}),\n        ...propSpec\n      }\n    });\n  }\n  /**\n   * Instruct that the Web script will receive events from the shell.\n   * See {@link WebshellInvariantProps.webHandleRef}, {@link WebHandle.postMessageToWeb} and {@link WebjsContext.onShellMessage}.\n   *\n   * @param eventId - A unique identifier for the event received by the Web script.\n   *\n   * @typeparam I - A type for the event identifier.\n   * @typeparam P - A type describing the shape of payloads sent to Web handlers.\n   */\n  withWebHandler<I extends string = string, P = undefined>(eventId: I) {\n    return new FeatureBuilder<\n      O,\n      S,\n      W & { [k in I]: WebHandlerDefinition<I, P> }\n    >({\n      ...this.config,\n      __webSpecs: {\n        ...(this.config.__webSpecs || {}),\n        [eventId]: { async: false, eventId }\n      }\n    });\n  }\n  /**\n   * Assemble this builder object into a feature class.\n   */\n  build(): FeatureClass<O, S, W> {\n    const {\n      script,\n      identifier: featureIdentifier,\n      __propSpecs: propSpecs,\n      __webSpecs: webSpecs,\n      defaultOptions\n    } = this.config;\n    const ctor = class extends Feature<O, S, W> {\n      static identifier = featureIdentifier;\n      constructor(...args: O extends Partial<O> ? [] | [O] : [O]) {\n        super(\n          {\n            script,\n            identifier: featureIdentifier,\n            defaultOptions,\n            propSpecs: (propSpecs || []) as S,\n            webSpecs: (webSpecs || {}) as W\n          },\n          (args[0] || {}) as O\n        );\n      }\n    };\n    Object.defineProperty(ctor, 'displayName', {\n      configurable: true,\n      enumerable: false,\n      writable: false,\n      value: `Feature(${featureIdentifier})`\n    });\n    return ctor;\n  }\n}\n"]}