function HandleHTMLDimensionsFeature(context) {
  var options = context.options || {};
  var forceImplementation = options.forceImplementation || false;
  var listenToWindowResizeEvent =
    options.listenToWindowResizeEvent === false ? false : true;
  var pollingInterval =
    typeof options.pollingInterval === 'number' ? options.pollingInterval : 200;
  var deltaMin = options.deltaMin || 0;
  var oldDimensions = {
    layoutViewport: { width: 0, height: 0 },
    content: { width: 0, height: 0 }
  };
  var MutationObserver =
    window['MutationObserver'] || window['WebKitMutationObserver'];
  function extractNumericValue(pixelString) {
    return pixelString ? parseFloat(pixelString.match(/[\d.]+/)) : 0;
  }
  function dimensionsAreEqual(d1, d2) {
    return (
      Math.abs(d1.layoutViewport.width - d2.layoutViewport.width) < deltaMin &&
      Math.abs(d1.layoutViewport.height - d2.layoutViewport.height) <
        deltaMin &&
      Math.abs(d1.content.width - d2.content.width) < deltaMin &&
      Math.abs(d1.content.height - d2.content.height) < deltaMin &&
      d1.implementation === d2.implementation
    );
  }
  function createPostDimensions(implementation) {
    return context.makeCallbackSafe(function postSize() {
      var bodyStyle = getComputedStyle(document.body);
      var bodySize = document.body.getBoundingClientRect();
      var marginRight = extractNumericValue(bodyStyle.marginRight);
      var marginBottom = extractNumericValue(bodyStyle.marginBottom);
      var layoutViewport = {
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight
      };
      var dimensions = {
        implementation: implementation,
        layoutViewport: layoutViewport,
        content: {
          width: bodySize.right + marginRight,
          height: bodySize.bottom + marginBottom
        }
      };
      if (!dimensionsAreEqual(oldDimensions, dimensions)) {
        context.postMessageToShell(dimensions);
        oldDimensions = dimensions;
      }
    });
  }
  if (
    window.ResizeObserver &&
    (forceImplementation === false || forceImplementation === 'resize')
  ) {
    // resize mode
    var resizePostDimensions = createPostDimensions('resize');
    var resizeObserver = new window.ResizeObserver(resizePostDimensions);
    resizeObserver.observe(document.body);
    resizePostDimensions();
  } else if (
    MutationObserver &&
    (forceImplementation === false || forceImplementation === 'mutation')
  ) {
    // mutation mode
    var observerPostDimensions = createPostDimensions('mutation');
    if (listenToWindowResizeEvent) {
      window.addEventListener('resize', observerPostDimensions);
    }
    var observer = new MutationObserver(observerPostDimensions);
    observer.observe(document, {
      subtree: true,
      attributes: true
    });
    observerPostDimensions();
  } else {
    // polling mode
    var pollingPostDimensions = createPostDimensions('polling');
    if (listenToWindowResizeEvent) {
      window.addEventListener('resize', pollingPostDimensions);
    }
    setInterval(pollingPostDimensions, pollingInterval);
    pollingPostDimensions();
    forceImplementation !== 'polling' &&
      context.warn(
        "This browser doesn't support either MutationObserver or ResizeObserver." +
          'The dimensions will still be read every ' +
          pollingInterval +
          'ms and committed when a change is observed.'
      );
  }
}
